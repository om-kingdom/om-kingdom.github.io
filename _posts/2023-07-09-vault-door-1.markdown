---
layout: post
title:  "vault-door-1 PicoCTF"
date:   2023-07-10 12:32:45 +0100
categories:
---

# vault-door-1 
#PicoCTF2019 #ReverseEngineering
# Objetivo
This vault uses some complicated arrays! I hope you can make sense of it, special agent. The source code for this vault is here: VaultDoor1.java
# Solucion
Se descarga el codigo fuente mediante 'wget'. Es un archivo.java, código fuente sin compilar.
Al abrir el codigo nos encontramos con que la bandera se encuentra de nuevo dentro del código, sin embargo colocada de forma menos directa.
En el metodo de comprobacion de la bandera nos encontramos con una serie de comprobaciones letra por letra de la bandera introducida, solo que colocada en desorden. Son 31 caracteres los que se deben comprobar.

Haciendo uso del emulador de terminal podemos obener la bandera.

```bash
❯ for i in {0..32}; do
  cat VaultDoor1.java | grep "charAt($i)" | grep -o "'[^']*'" | tr -d "'"
done

d
3
5
c
r
4
m
b
l
3
_
t
H
3
_
c
H
4
r
4
c
T
3
r
5
_
f
6
d
a
f
4
```
Uniendo la bandera a mano seria:
picoCTF{d35cr4mbl3_tH3_cH4r4cT3r5_f6daf4}

# Notas adicionales
    for i in {1..31}; do: Inicia un bucle for que va desde el número 1 hasta el número 31. En cada iteración del bucle, el valor actual de i se asignará a la variable.

    cat VaultDoor1.java: Lee el contenido del archivo VaultDoor1.java. Aquí asumo que el archivo VaultDoor1.java contiene el código fuente relevante.

    grep "charAt($i)": Utiliza grep para buscar líneas que contengan la cadena "charAt($i)". El valor de i se reemplaza por el número de iteración actual en cada ciclo del bucle.

    grep -o "'[^']*'": Utiliza grep con la opción -o y la expresión regular '[^']*' para buscar y extraer el contenido entre comillas simples. Esto significa que se extraerá el texto entre las comillas simples, incluyendo cualquier carácter que esté dentro.

    tr -d "'": Utiliza tr para eliminar las comillas simples del resultado obtenido en el paso anterior. Esto significa que se eliminarán las comillas simples del texto extraído.
